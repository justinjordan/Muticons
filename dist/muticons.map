{"version":3,"sources":["muticons.js","index.js"],"names":["Muticons","elements","document","getElementsByClassName","i","el","muticons_init","states","classes","className","split","c","indexOf","replace","state","style","window","getComputedStyle","innerHTML","color","masks","bg","backgroundColor","attrs","attributes","attr","v","value","name","j","segs","shapes","transitionDuration","width","height","mutate","jQuery","fn","extend","s","each","addEventListener","length","desiredState","obj","stateName","nextState","nextStateName","newClass","callbackPath","callback","index","console","error","RegExp","trim","getAttribute","muticons","onload","init"],"mappings":"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","file":"muticons.map","sourceRoot":"../src","sourcesContent":["class Muticons {\n  init() {\n    const elements = document.getElementsByClassName(\"mut\");\n\n    for (let i = 0; i < elements.length; i++) {\n      let el = elements[i];\n      \n      if (el.muticons_init) {\n        continue;\n      } else {\n        el.muticons_init = true;\n      }\n      \n      if (typeof el !== 'object') {\n        continue;\n      }\n      \n      // Apply Quick Classes\n      el.states = [];\n      let classes = typeof el.className !== 'undefined' ? el.className.split(/\\s+/) : [];\n\n      for (let i in classes) {\n        let c = classes[i];\n        \n        if (c.indexOf('mut-')!==-1) {\n          el.states = c.replace('mut-','').split('--');\n        }\n      }\n\n      el.state = 0;\n      el.className += ' ' + el.states[0];\n      \n      // Get button \"color\" to apply to shapes\n      let style = window.getComputedStyle(el);\n      \n      // Add Shapes\n      let segments = 3;\n      for (let i = 0; i < segments; i++) {\n        el.innerHTML += '<span class=\"mut-segment\" style=\"background-color: '+ style.color +';\"></span>';\n      }\n\n      let masks = 2;\n      for (let i = 0; i < masks; i++) {\n        let bg = style.backgroundColor;\n        el.innerHTML += '<span class=\"mut-mask\" style=\"background-color: '+ bg +';\"></span>';\n      }\n      \n      // Read data attributes\n      let attrs = el.attributes;\n      for (let i in attrs) {\n        let attr = attrs[i];\n        let v = attr.value;\n        \n        switch (attr.name) {\n          case 'mut-bg':\n          case 'mut-background':\n            el.style.backgroundColor = v;\n            let masks = el.getElementsByClassName('mut-mask');\n            for (let j in masks) {\n              if (typeof masks[j] === 'object') {\n                masks[j].style.backgroundColor = v;\n              }\n            }\n            break;\n          \n          case 'mut-fg':\n          case 'mut-foreground':\n          case 'mut-color':\n            let segs = el.getElementsByClassName('mut-segment');\n            for (let j in segs) {\n              if (typeof segs[j] === 'object') {\n                segs[j].style.backgroundColor = v;\n              }\n            }\n            break;\n          \n          case 'mut-duration':\n            let shapes = el.getElementsByClassName('mut-segment');\n            for (let j in shapes) {\n              if (typeof shapes[j] === 'object') {\n                shapes[j].style.transitionDuration = v;\n              }\n            }\n\n            shapes = el.getElementsByClassName('mut-mask');\n            for (let j in shapes) {\n              if (typeof shapes[j] === 'object') {\n                shapes[j].style.transitionDuration = v;\n              }\n            }\n            break;\n          \n          case 'mut-size':\n            el.style.width = v;\n            el.style.height = v;\n            break;\n        }\n      }\n      \n      \n      // Add Mutate to Element\n      el.mutate = this.mutate;\n      \n      // Add Jquery Compatibility\n      if (typeof jQuery === 'function') {\n        jQuery.fn.extend({\n          mutate: (s) => {\n            return this.each(function() {\n              this.mutate(s);\n            });\n          }\n        });\n      }\n      \n      // Add Click Function\n      el.addEventListener(\"click\", () => {\n        this.mutate(null, el);\n      });\n    }\n  }\n\n  mutate(desiredState, obj) {\n    let stateName, nextState, nextStateName, newClass, callbackPath, callback;\n    \n    stateName = obj.states[obj.state];\n    \n    if (desiredState) {\n      // mutation specified\n      switch (typeof desiredState) {\n        case 'number':\n          nextState\t\t= desiredState;\n          nextState\t\t= nextState < obj.states.length ? nextState : 0;\n          break;\n        \n        case 'string':\n          let index = obj.states.indexOf(s);\n          if (index >= 0) {\n            nextState = index;\n          } else {\n            console.error(\n              \"Couldn't mutate to '\" + desiredState + \"' because it's not a mutation defined in the element.\"\n            );\n            return;\n          }\n          break;\n      }\n    } else {\n      // Increment to next mutation\n      nextState\t\t= obj.state + 1;\n      nextState\t\t= nextState < obj.states.length ? nextState : 0;\n    }\n    \n    nextStateName\t= obj.states[nextState];\n    newClass = obj.className.replace(new RegExp('(?:^|\\\\s)'+ stateName + '(?:\\\\s|$)'), '   '+nextStateName+' ');\n    newClass = newClass.trim().replace(/[\\s]{2,}/g, ' ');\n    \n    obj.className = newClass;\n    obj.state = nextState;\n    \n    // Fire Callback\n    callbackPath = obj.getAttribute('mut-callback');\n    callbackPath = typeof callbackPath === 'string' ? callbackPath.trim().replace(/^window\\./, '').split('.') : [];\n    callback = callbackPath.length > 0 ? window : null;\n    for (let i in callbackPath) {\n      if (typeof callback[callbackPath[i]] !== 'undefined') {\n        callback = callback[callbackPath[i]];\n      }\n    }\n\n    if (typeof callback === 'function') {\n      callback(stateName, obj);\n    }\n  }\n}\n\nexport default Muticons;\n","import './muticons.less'\nimport Muticons from './muticons'\n\nconst muticons = new Muticons()\n\nwindow.onload = () => {\n  muticons.init()\n}"]}